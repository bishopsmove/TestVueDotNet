// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestVueDotNet.Data;

namespace data.Migrations
{
    [DbContext(typeof(MsSqlContext))]
    [Migration("20180927151213_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TestVueDotNet.Data.Model.Provider", b =>
                {
                    b.Property<string>("ProviderId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(true);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .IsUnicode(true);

                    b.Property<bool>("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true);

                    b.HasKey("ProviderId");

                    b.ToTable("Provider");
                });

            modelBuilder.Entity("TestVueDotNet.Data.Model.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .IsUnicode(true);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("Enabled");

                    b.Property<long?>("LastUpdatedBy");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2(7)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(true);

                    b.Property<string>("ParentRoleId")
                        .HasMaxLength(32)
                        .IsUnicode(true);

                    b.HasKey("RoleId")
                        .HasName("PK_RoleId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("ParentRoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("TestVueDotNet.Data.Model.RoleSecurityClaim", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(32)
                        .IsUnicode(true);

                    b.Property<string>("SecurityClaimId")
                        .HasMaxLength(32)
                        .IsUnicode(true);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(true);

                    b.HasKey("RoleId", "SecurityClaimId")
                        .HasName("PK_RoleSecurityClaim");

                    b.HasIndex("SecurityClaimId");

                    b.ToTable("RoleSecurityClaim");
                });

            modelBuilder.Entity("TestVueDotNet.Data.Model.SecurityClaim", b =>
                {
                    b.Property<string>("SecurityClaimId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .IsUnicode(true);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .IsUnicode(true);

                    b.Property<bool>("Enabled");

                    b.Property<long?>("LastUpdatedBy");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2(7)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(true);

                    b.Property<string>("ValidationPattern")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.HasKey("SecurityClaimId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("SecurityClaim");
                });

            modelBuilder.Entity("TestVueDotNet.Data.Model.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CultureName")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true);

                    b.Property<bool>("Enabled");

                    b.Property<long?>("LastUpdatedBy");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2(7)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("TimeZoneId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(true);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true);

                    b.HasKey("UserId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("User");
                });

            modelBuilder.Entity("TestVueDotNet.Data.Model.UserProvider", b =>
                {
                    b.Property<string>("ProviderId")
                        .HasMaxLength(64)
                        .IsUnicode(true);

                    b.Property<long>("UserId");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2(7)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(64)
                        .IsUnicode(true);

                    b.Property<string>("UserProviderType")
                        .IsRequired()
                        .IsUnicode(true);

                    b.HasKey("ProviderId", "UserId")
                        .HasName("PK_UserProvider");

                    b.HasIndex("UserId");

                    b.ToTable("UserProvider");

                    b.HasDiscriminator<string>("UserProviderType").HasValue("External");
                });

            modelBuilder.Entity("TestVueDotNet.Data.Model.UserRole", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(32)
                        .IsUnicode(true);

                    b.Property<long>("UserId");

                    b.HasKey("RoleId", "UserId")
                        .HasName("PK_UserRole");

                    b.HasIndex("UserId")
                        .HasName("IX_UserRole_UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("TestVueDotNet.Data.Model.Verification", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(true);

                    b.Property<string>("Fingerprint")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.Property<DateTime>("IssuedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2(7)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(true);

                    b.Property<DateTime?>("RedeemedAt")
                        .HasColumnType("DATETIME2(7)");

                    b.Property<long>("UserId");

                    b.HasKey("Code")
                        .HasName("PK_Verification");

                    b.HasIndex("UserId")
                        .HasName("IX_Verification_UserId");

                    b.ToTable("Verification");
                });

            modelBuilder.Entity("TestVueDotNet.Data.Model.UserProviderLocal", b =>
                {
                    b.HasBaseType("TestVueDotNet.Data.Model.UserProvider");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(128)
                        .IsUnicode(true);

                    b.ToTable("UserProviderLocal");

                    b.HasDiscriminator().HasValue("Local");
                });

            modelBuilder.Entity("TestVueDotNet.Data.Model.Role", b =>
                {
                    b.HasOne("TestVueDotNet.Data.Model.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TestVueDotNet.Data.Model.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TestVueDotNet.Data.Model.Role", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentRoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TestVueDotNet.Data.Model.RoleSecurityClaim", b =>
                {
                    b.HasOne("TestVueDotNet.Data.Model.Role", "Role")
                        .WithMany("SecurityClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TestVueDotNet.Data.Model.SecurityClaim", "SecurityClaim")
                        .WithMany("Roles")
                        .HasForeignKey("SecurityClaimId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TestVueDotNet.Data.Model.SecurityClaim", b =>
                {
                    b.HasOne("TestVueDotNet.Data.Model.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TestVueDotNet.Data.Model.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TestVueDotNet.Data.Model.User", b =>
                {
                    b.HasOne("TestVueDotNet.Data.Model.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TestVueDotNet.Data.Model.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TestVueDotNet.Data.Model.UserProvider", b =>
                {
                    b.HasOne("TestVueDotNet.Data.Model.Provider", "Provider")
                        .WithMany("Users")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("FK_UserProvider_Provider")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TestVueDotNet.Data.Model.User", "User")
                        .WithMany("Providers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserProvider_User")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TestVueDotNet.Data.Model.UserRole", b =>
                {
                    b.HasOne("TestVueDotNet.Data.Model.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserRole_Role")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TestVueDotNet.Data.Model.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserRole_User")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TestVueDotNet.Data.Model.Verification", b =>
                {
                    b.HasOne("TestVueDotNet.Data.Model.User", "User")
                        .WithMany("Verifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Verification_User")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
